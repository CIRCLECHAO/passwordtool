<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>TOOL.</title>
    <meta name="keywords" content="morse encode, morse decode, morse unicode"/>
    <meta name="description" content="."/>
    <style type="text/css">
        body {
            width: 400px;
            margin: 0 auto;
        }

        pre {
            background-color: #f6dcd7;
            padding: 10px 15px;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        pre.strong {
            font-weight: bold;
        }

        form, form textarea {
            width: 100%;
        }
    </style>
</head>
<body>

<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<script type="text/javascript">  
while (true) {  
    try {  
    var w = 420, h = 500;  
        window.resizeTo(w, h);  
        window.moveTo((window.screen.width - w) / 2, (window.screen.height - h) / 2);  
        break;  
    } catch (e) { continue; }  
}  
</script> 
<form>
    <textarea rows='10' id='input' placeholder=""></textarea>
    <br/>
     <input type='hidden' id='space' value='/' placeholder=''/>
     <input type='hidden' id='short' value='.' placeholder=''/>
     <input type='hidden' id='long' value='-' placeholder=''/>
    <br/>
    <br/>
    <input type='button' onclick='encode()' value='Encode'/>
    <input type='button' onclick='decode()' value='Decode'/>
</form>
<pre id='result'></pre>

<!--
  <script type="text/javascript" src="dist/xmorse.min.js"></script>
-->
<script type="text/javascript">
var close = 1;

// 创建Base64对象
var Base64 = {
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    encode: function(e) {
        var t = "";
        var n, r, i, s, o, u, a;
        var f = 0;
        e = Base64._utf8_encode(e);
        while (f < e.length) {
            n = e.charCodeAt(f++);
            r = e.charCodeAt(f++);
            i = e.charCodeAt(f++);
            s = n >> 2;
            o = (n & 3) << 4 | r >> 4;
            u = (r & 15) << 2 | i >> 6;
            a = i & 63;
            if (isNaN(r)) {
                u = a = 64
            } else if (isNaN(i)) {
                a = 64
            }
            t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)
        }
        return t
    },
    decode: function(e) {
        var t = "";
        var n, r, i;
        var s, o, u, a;
        var f = 0;
        e=e.replace(/[^A-Za-z0-9+/=]/g,"");
        while (f < e.length) {
            s = this._keyStr.indexOf(e.charAt(f++));
            o = this._keyStr.indexOf(e.charAt(f++));
            u = this._keyStr.indexOf(e.charAt(f++));
            a = this._keyStr.indexOf(e.charAt(f++));
            n = s << 2 | o >> 4;
            r = (o & 15) << 4 | u >> 2;
            i = (u & 3) << 6 | a;
            t = t + String.fromCharCode(n);
            if (u != 64) {
                t = t + String.fromCharCode(r)
            }
            if (a != 64) {
                t = t + String.fromCharCode(i)
            }
        }
        t = Base64._utf8_decode(t);
        return t
    },
    _utf8_encode: function(e) {
        e = e.replace(/rn/g, "n");
        var t = "";
        for (var n = 0; n < e.length; n++) {
            var r = e.charCodeAt(n);
            if (r < 128) {
                t += String.fromCharCode(r)
            } else if (r > 127 && r < 2048) {
                t += String.fromCharCode(r >> 6 | 192);
                t += String.fromCharCode(r & 63 | 128)
            } else {
                t += String.fromCharCode(r >> 12 | 224);
                t += String.fromCharCode(r >> 6 & 63 | 128);
                t += String.fromCharCode(r & 63 | 128)
            }
        }
        return t
    },
    _utf8_decode: function(e) {
        var t = "";
        var n = 0;
        var r = c1 = c2 = 0;
        while (n < e.length) {
            r = e.charCodeAt(n);
            if (r < 128) {
                t += String.fromCharCode(r);
                n++
            } else if (r > 191 && r < 224) {
                c2 = e.charCodeAt(n + 1);
                t += String.fromCharCode((r & 31) << 6 | c2 & 63);
                n += 2
            } else {
                c2 = e.charCodeAt(n + 1);
                c3 = e.charCodeAt(n + 2);
                t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
                n += 3
            }
        }
        return t
    }
}

    /**
     * Copyright (c) 2017 hustcc
     * License: MIT
     * Version: %%GULP_INJECT_VERSION%%
     * GitHub: https://github.com/hustcc/xmorse
     **/
    /* jshint expr: true */
    !function (root, factory) {
        if (typeof module === 'object' && module.exports) {
            module.exports = factory(root); // nodejs support
            module.exports['default'] = module.exports; // es6 support
        } else
            root.xmorse = factory();
    }(typeof window !== 'undefined' ? window : this,
        function () {
            // Map of Morse code patterns to supported characters.
            var standard = {
                /* Letters                               */
                'A': '01',      /* A                   */
                'B': '1000',    /* B                   */
                'C': '1010',    /* C                   */
                'D': '100',     /* D                   */
                'E': '0',       /* E                   */
                'F': '0010',    /* F                   */
                'G': '110',     /* G                   */
                'H': '0000',    /* H                   */
                'I': '00',      /* I                   */
                'J': '0111',    /* J                   */
                'K': '101',     /* K                   */
                'L': '0100',    /* L                   */
                'M': '11',      /* M                   */
                'N': '10',      /* N                   */
                'O': '111',     /* O                   */
                'P': '0110',    /* P                   */
                'Q': '1101',    /* Q                   */
                'R': '010',     /* R                   */
                'S': '000',     /* S                   */
                'T': '1',       /* T                   */
                'U': '001',     /* U                   */
                'V': '0001',    /* V                   */
                'W': '011',     /* W                   */
                'X': '1001',    /* X                   */
                'Y': '1011',    /* Y                   */
                'Z': '1100',    /* Z                   */
                /* Numbers                               */
                '0': '11111',   /* 0                   */
                '1': '01111',   /* 1                   */
                '2': '00111',   /* 2                   */
                '3': '00011',   /* 3                   */
                '4': '00001',   /* 4                   */
                '5': '00000',   /* 5                   */
                '6': '10000',   /* 6                   */
                '7': '11000',   /* 7                   */
                '8': '11100',   /* 8                   */
                '9': '11110',   /* 9                   */
                /* Punctuation                           */
                '.': '010101',  /* Full stop           */
                ',': '110011',  /* Comma               */
                '?': '001100',  /* Question mark       */
                '\'': '011110', /* Apostrophe          */
                '!': '101011',  /* Exclamation mark    */
                '/': '10010',   /* Slash               */
                '(': '10110',   /* Left parenthesis    */
                ')': '101101',  /* Right parenthesis   */
                '&': '01000',   /* Ampersand           */
                ':': '111000',  /* Colon               */
                ';': '101010',  /* Semicolon           */
                '=': '10001',   /* Equal sign          */
                '+': '01010',   /* Plus sign           */
                '-': '100001',  /* Hyphen1minus        */
                '_': '001101',  /* Low line            */
                '"': '010010',  /* Quotation mark      */
                '$': '0001001', /* Dollar sign         */
                '@': '011010'  /* At sign             */
            };
            // 计算反向的字典
            var standardReverse = {};
            for (var key in standard) {
                standardReverse[standard[key]] = key;
            }

            function defaultOption(option) {
                option = option || {};
                return [
                    option.space || '/',
                    option.short || '.',
                    option.long || '-'
                ];
            }

            function unicodeHexMorse(ch) {
                var r = [];
                for (var i = 0; i < ch.length; i++)
                    r[i] = ('00' + ch.charCodeAt(i).toString(16)).slice(-4);
                r = r.join(''); // unicode 值
                r = parseInt(r, 16).toString(2); // 转二进制
                return r;
            }

            /**
             * encode: encode string to morse code.
             * - msg: strings need to be encode.
             * - option: encode option.
             *
             * Return the morse code.
             *
             * Usage
             * var option = {
             *  space: ' ',
             *  long: '-',
             *  short: '*'
             * };
             * xmorse.encode('I love you.', option);
             * Will get return with `** *-** --- ***- * -*-- --- **- *-*-*-`.
             *
             **/
            function encode(msg, option) {
                option = defaultOption(option); // 默认参数
                var morse = []; // 最终的 morse 结果
                // 删除空格，转大写，分割为数组
                msg = msg.replace(/\s+/g, '').toLocaleUpperCase().split('');
                var ch, r;
                for (var i = 0, l = msg.length; i < l; i++) {
                    ch = msg[i];
                    r = standard[ch];
                    if (!r) r = unicodeHexMorse(ch); // 找不到，说明是非标准的字符，使用 unicode。
                    morse.push(r.replace(/0/g, option[1]).replace(/1/g, option[2]));
                }
                return morse.join(option[0]);
            }

            function morseHexUnicode(mor) {
                mor = parseInt(mor, 2); // 解析 2 进制数
                if (isNaN(mor)) return ''; // 解析失败，直接返回空字符串跳过
                return unescape('%u' + mor.toString(16)); // 转 16 进制 -> unicode -> unicode 转字符串
            }

            /**
             * decode: encode string to morse code.
             * - morse: morse code need to be decode.
             * - option: encode option.
             *
             * Return the decode string.
             *
             * Usage
             * var option = {
             *  space: ' ',
             *  long: '-',
             *  short: '*'
             * };
             * xmorse.decode('** *-** --- ***- * -*-- --- **- *-*-*-', option);
             * Will get return with `ILOVEYOU`.
             *
             **/
            function decode(morse, option) {
                /**/
                morse = Base64.decode(morse)

                option = defaultOption(option);
                var msg = [];
                morse = morse.split(option[0]); // 分割为数组
                var mor, r;
                for (var i = 0, l = morse.length; i < l; i++) {
                    mor = morse[i].replace(/\s+/g, '') // 去除空格
                        .replace(new RegExp('\\' + option[1], 'g'), '0')
                        .replace(new RegExp('\\' + option[2], 'g'), '1'); // 转二进制;
                    r = standardReverse[mor];
                    if (!r) r = morseHexUnicode(mor); // 找不到，说明是非标准字符的 morse，使用 unicode 解析方式。
                    msg.push(r);
                }
                return msg.join('');
            }

            return {
                encode: encode,
                decode: decode
            };
        });

    /*--------------------------------------------------*/


    function $_(id) {
        return document.getElementById(id);
    }

    function getoption() {
        return {
            space: $_('space').value,
            short: $_('short').value,
            long: $_('long').value
        };
    }

    function encode() {
		if($_('input').value == "OPEN" && close == 1){
			close = 2;
		}
		if(close ==2){
            var c = Base64.encode(xmorse.encode($_('input').value, getoption()))

            $_('result').innerHTML = c;
			$_('input').value = "";
		}else{
			$_('result').innerHTML = "very good";
		}
        
    }

    function decode() {
	if(close ==2){
	    //var r = Base64.decode();
		$_('result').innerHTML = xmorse.decode($_('input').value, getoption())  || 'Morse code is not valid.';
		setTimeout(function () {
			$_('result').innerHTML = "";
		}, 2000);
		}else{
			$_('result').innerHTML = "not bad";
		}
    }
</script>
</body>
</html>
